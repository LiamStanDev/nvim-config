{
  "Template": {
    "prefix": "!",
    "body": [
      "cmake_minimum_required(VERSION 3.20)",
      "",
      "project(",
      "    $1",
      "    LANGUAGES CXX",
      "    VERSION 0.1.0",
      "    DESCRIPTION \"Open-source project\"",
      "    HOMEPAGE_URL https://github.com/user/project",
      ")",
      "",
      "set(CMAKE_CXX_STANDARD 23)",
      "set(CMAKE_CXX_STANDARD_REQUIRED ON)",
      "set(CMAKE_CXX_EXTENSIONS OFF)",
      "set(CMAKE_EXPORT_COMPILE_COMMANDS ON)",
      "",
      "if(PROJECT_BINARY_DIR STREQUAL PROJECT_SOURCE_DIR)",
      "    message(",
      "        FATAL_ERROR",
      "        \"In-source builds are not allowed. Use 'cmake -B build' to specify a build directory.\")",
      "endif()",
      "",
      "if(NOT CMAKE_BUILD_TYPE)",
      "    set(CMAKE_BUILD_TYPE Release)",
      "endif()",
      "",
      "set(CMAKE_CXX_FLAGS_RELEASE \"-O3 -DNDEBUG\")",
      "set(CMAKE_CXX_FLAGS_DEBUG \"-O0 -g -DDEBUG\")",
      "",
      "add_compile_options(",
      "    -Wall",
      "    -Wextra",
      "    -Werror=uninitialized",
      "    -Werror=return-type",
      "    -Wconversion",
      "    -Wsign-compare",
      "    -Werror=unused-result",
      "    -Werror=suggest-override",
      "    -Wzero-as-null-pointer-constant",
      "    -Wold-style-cast",
      "    -Wnon-virtual-dtor",
      ")",
      "",
      "message(STATUS \"C++ compile options ${CMAKE_CXX_FLAGS}\")",
      "",
      "add_executable($2 main.cpp)",
      "add_custom_target(run COMMAND $<TARGET_FILE:$2>)",
      "",
      "message(STATUS \"Project: ${PROJECT_NAME} (v${PROJECT_VERSION})\")",
      "message(STATUS \"Build type: ${CMAKE_BUILD_TYPE}\")",
      "message(STATUS \"Compiler: ${CMAKE_CXX_COMPILER_ID} (${CMAKE_CXX_COMPILER})\")",
      "message(STATUS \"C++ standard: C++${CMAKE_CXX_STANDARD}\")"
    ],
    "description": "Updated CMake template."
  },
  "Mininal executable": {
    "prefix": "exec",
    "body": [
      "cmake_minimum_required(VERSION 3.12)",
      "project(demo)",
      "",
      "set(CMAKE_EXPORT_COMPILE_COMMANDS 1)",
      "set(CMAKE_BUILD_TYPE Debug)",
      "",
      "add_executable(${PROJECT_NAME} main.cc)"
    ],
    "description": "Standard starter template for a  CMakeList.txt"
  },
  "QT Template": {
    "prefix": "qt",
    "body": [
      "#==================== Progect info ====================",
      "cmake_minimum_required(VERSION 3.12)",
      "project($0)",
      "",
      "#==================== Env =============================",
      "set(CMAKE_CXX_STANDARD 17)",
      "# set (CMAKE_PREFIX_PATH \"/opt/homebrew/Cellar/qt/6.3.1\") # add search path (with CMakeLists.txt)",
      "# set(CMAKE_AUTOMOC ON) # auto use macro",
      "# set(CMAKE_AUTORCC ON)",
      "# set(CMAKE_AUTOUIC ON) # auto use ui",
      "# set(CMAKE_AUTOUIC_SEARCH_PATHS ./ui) # set ui path",
      "",
      "",
      "#==================== Packages ========================",
      "# shoud add to environment variable",
      "# find_package(Qt6 COMPONENTS Core Gui Widgets REQUIRED)",
      "                                                        ",
      "#=================== Progect Dir ====================== ",
      "set(INC_DIR ./includes)",
      "set(SRC_DIR ./src)",
      "set(RESOURCE_DIR ./resources)",
      "",
      "# add files: create a SOURCE variable",
      "file(GLOB_RECURSE SOURCES",
      "        # \"\\$${UI_DIR}/*.ui\"",
      "        # \"${RESOURCE_DIR}/*.qrc\"",
      "        \"${SRC_DIR}/*.cpp\")",
      "",
      "#==================== Executable ====================",
      "add_executable(${PROJECT_NAME} ${SOURCES})",
      "# add_library(${PROJECT_NAME} STATIC ${SOURCES})",
      "# add_library(${PROJECT_NAME} SHARED ${SOURCES})",
      "",
      "#==================== Header File ===================",
      "target_include_directories(${PROJECT_NAME} PRIVATE ${INC_DIR}) ",
      "",
      "#==================== Link lib ======================",
      "# Link libraries",
      "# target_link_libraries(Test02 Qt::Core Qt::Gui Qt::Widgets)"
    ],
    "description": "Standard starter template for a  CMakeList.txt"
  }
}
