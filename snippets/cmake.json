{
  "Top Level Exe CMake": {
    "prefix": "!",
    "body": [
      "cmake_minimum_required(VERSION 3.20)",
      "",
      "project(",
      "    ${1:ProjectName}",
      "    LANGUAGES CXX",
      "    VERSION 0.1.0",
      "    DESCRIPTION \"${2:Open-source project}\"",
      "    HOMEPAGE_URL \"${3:https://github.com/user/project}\"",
      ")",
      "",
      "set(CMAKE_CXX_STANDARD ${4:20})",
      "set(CMAKE_CXX_STANDARD_REQUIRED ON)",
      "set(CMAKE_CXX_EXTENSIONS OFF)",
      "set(CMAKE_EXPORT_COMPILE_COMMANDS ON)",
      "",
      "if(PROJECT_BINARY_DIR STREQUAL PROJECT_SOURCE_DIR)",
      "    message(",
      "        FATAL_ERROR",
      "        \"In-source builds are not allowed. Use 'cmake -B build' to specify a build directory.\"",
      "    )",
      "endif()",
      "",
      "option(${5:PROJECT_NAME}_ENALBLE_TEST \"Enable test\" ON)",
      "",
      "if(NOT CMAKE_BUILD_TYPE)",
      "    set(CMAKE_BUILD_TYPE Release)",
      "endif()",
      "",
      "message(STATUS \"Project: \\${PROJECT_NAME} (v\\${PROJECT_VERSION})\")",
      "message(STATUS \"Build type: \\${CMAKE_BUILD_TYPE}\")",
      "message(STATUS \"Compiler: \\${CMAKE_CXX_COMPILER_ID} (\\${CMAKE_CXX_COMPILER})\")",
      "message(STATUS \"C++ standard: C++\\${CMAKE_CXX_STANDARD}\")",
      "",
      "include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Dependencies.cmake)",
      "",
      "set(DEBUG_COMPILE_OPTIONS",
      "    \"-O0\"",
      "    \"-g\"",
      "    \"-DDEBUG\"",
      "    \"-Wall\"",
      "    \"-Wextra\"",
      "    \"-Werror=uninitialized\"",
      "    \"-Werror=return-type\"",
      "    \"-Wconversion\"",
      "    \"-Wsign-compare\"",
      "    \"-Werror=unused-result\"",
      "    \"-Werror=suggest-override\"",
      "    \"-Wzero-as-null-pointer-constant\"",
      "    \"-Wold-style-cast\"",
      "    \"-Wnon-virtual-dtor\"",
      ")",
      "set(RELEASE_COMPILE_OPTIONS \"-O3\" \"-w\" \"-DNDEBUG\")",
      "",
      "file(GLOB_RECURSE SOURCES CONFIGURE_DEPENDS \"src/*.cpp\")",
      "",
      "add_executable(${6:main})",
      "target_sources(${6:main} PRIVATE \\${SOURCES})",
      "target_include_directories(${6:main} PRIVATE \\${PROJECT_SOURCE_DIR}/include)",
      "",
      "target_compile_options(",
      "    ${6:main}",
      "    PRIVATE",
      "        $<$<CONFIG:Debug>:\\${DEBUG_COMPILE_OPTIONS}>",
      "        $<$<CONFIG:Release>:\\${RELEASE_COMPILE_OPTIONS}>",
      ")",
      "",
      "if(${5:ProjectName}_ENALBLE_TEST)",
      "    add_subdirectory(tests)",
      "endif()",
      "",
      "add_custom_target(",
      "    run",
      "    DEPENDS ${6:main}",
      "    COMMAND $<TARGET_FILE:${5:main}>",
      "    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}",
      ")"
    ],
    "description": "A template for setting up a top level exe CMake."
  },

  "Top Level Lib CMake": {
    "prefix": "!!",
    "body": [
      "cmake_minimum_required(VERSION 3.20)",
      "",
      "project(",
      "    ${1:ProjectName}",
      "    LANGUAGES CXX",
      "    VERSION 0.1.0",
      "    DESCRIPTION \"${2:Open-source project}\"",
      "    HOMEPAGE_URL \"${3:https://github.com/user/project}\"",
      ")",
      "",
      "set(CMAKE_CXX_STANDARD ${4:20})",
      "set(CMAKE_CXX_STANDARD_REQUIRED ON)",
      "set(CMAKE_CXX_EXTENSIONS OFF)",
      "set(CMAKE_EXPORT_COMPILE_COMMANDS ON)",
      "",
      "if(PROJECT_BINARY_DIR STREQUAL PROJECT_SOURCE_DIR)",
      "    message(",
      "        FATAL_ERROR",
      "        \"In-source builds are not allowed. Use 'cmake -B build' to specify a build directory.\"",
      "    )",
      "endif()",
      "",
      "option(${5:PROJECT_NAME}_ENALBLE_TEST \"Enable test\" ON)",
      "",
      "if(NOT CMAKE_BUILD_TYPE)",
      "    set(CMAKE_BUILD_TYPE Release)",
      "endif()",
      "",
      "message(STATUS \"Project: \\${PROJECT_NAME} (v\\${PROJECT_VERSION})\")",
      "message(STATUS \"Build type: \\${CMAKE_BUILD_TYPE}\")",
      "message(STATUS \"Compiler: \\${CMAKE_CXX_COMPILER_ID} (\\${CMAKE_CXX_COMPILER})\")",
      "message(STATUS \"C++ standard: C++\\${CMAKE_CXX_STANDARD}\")",
      "",
      "include(cmake/Dependencies.cmake)",
      "",
      "set(DEBUG_COMPILE_OPTIONS",
      "    \"-O0\"",
      "    \"-g\"",
      "    \"-DDEBUG\"",
      "    \"-Wall\"",
      "    \"-Wextra\"",
      "    \"-Werror=uninitialized\"",
      "    \"-Werror=return-type\"",
      "    \"-Wconversion\"",
      "    \"-Wsign-compare\"",
      "    \"-Werror=unused-result\"",
      "    \"-Werror=suggest-override\"",
      "    \"-Wzero-as-null-pointer-constant\"",
      "    \"-Wold-style-cast\"",
      "    \"-Wnon-virtual-dtor\"",
      ")",
      "set(RELEASE_COMPILE_OPTIONS \"-O3\" \"-w\" \"-DNDEBUG\")",
      "",
      "add_subdirectory(src)",
      "",
      "if(${5:ProjectName}_ENALBLE_TEST)",
      "    enable_testing()",
      "    add_subdirectory(tests)",
      "endif()"
    ],
    "description": "A template for setting up a top level lib CMake."
  },
  "Source Directory CMake": {
    "prefix": "!s",
    "body": [
      "file(GLOB_RECURSE ${1:PROJECT_NAME}_SRC *.cpp)",
      "",
      "add_library(${2:ProjectName} STATIC)",
      "target_sources(${2:ProjectName} PRIVATE \\${${1:PROJECT_NAME}_SRC})",
      "target_include_directories(${2:ProjectName} PUBLIC \\${CMAKE_SOURCE_DIR}/include)",
      "",
      "target_compile_options(",
      "    ${2:ProjectName}",
      "    PRIVATE",
      "        $<$<CONFIG:Debug>:\\${DEBUG_COMPILE_OPTIONS}>",
      "        $<$<CONFIG:Release>:\\${RELEASE_COMPILE_OPTIONS}>",
      ")"
    ],
    "description": "A template for setting up a source CMake."
  },

  "Test Directory CMake": {
    "prefix": "!t",
    "body": [
      "include(FetchContent)",
      "",
      "# Download google-test",
      "FetchContent_Declare(",
      "    googletest",
      "    GIT_REPOSITORY \"https://github.com/google/googletest\"",
      "    GIT_TAG \"6910c9d9165801d8827d628cb72eb7ea9dd538c5\"",
      ")",
      "FetchContent_MakeAvailable(googletest)",
      "",
      "# Test executables",
      "file(GLOB TEST_SOURCES *.cpp)",
      "add_executable(test_runner \\${TEST_SOURCES})",
      "",
      "target_link_libraries(test_runner PRIVATE GTest::gtest_main moon)",
      "include(GoogleTest)",
      "gtest_discover_tests(test_runner)"
    ],
    "description": "A template for setting up a test CMake."
  },
  "FetchContent by Git": {
    "prefix": "fg",
    "body": [
      "include(FetchContent)",
      "",
      "FetchContent_Declare(",
      "    ${1:Name}",
      "    GIT_REPOSITORY \"${2:Repo Url}\"",
      "    GIT_TAG \"${3:Hash}\"",
      ")",
      "FetchContent_MakeAvailable(${1:Name})"
    ],
    "description": "A template for setting up a Dependencies CMake."
  },
  "FetchContent by Url": {
    "prefix": "fu",
    "body": [
      "include(FetchContent)",
      "",
      "FetchContent_Declare(",
      "    ${1:Name}",
      "    URL \"${2:Repo Url}\"",
      "    URL_HASH MD5=\"${3:Hash}\"",
      ")",
      "FetchContent_MakeAvailable(${1:Name})"
    ],
    "description": "A template for setting up a Dependencies CMake."
  },
  "FetchContent fmt": {
    "prefix": "fmt",
    "body": [
      "include(FetchContent)",
      "",
      "FetchContent_Declare(",
      "    fmt",
      "    GIT_REPOSITORY \"https://github.com/fmtlib/fmt.git\"",
      "    GIT_TAG \"9cf9f38eded63e5e0fb95cd536ba51be601d7fa2\" # v11.1.3",
      ")",
      "FetchContent_MakeAvailable(fmt)"
    ],
    "description": "A template for setting up a fmt dependencies CMake."
  },
  "FetchContent gtest": {
    "prefix": "gtest",
    "body": [
      "include(FetchContent)",
      "",
      "FetchContent_Declare(",
      "    googletest",
      "    GIT_REPOSITORY \"https://github.com/google/googletest.git\"",
      "    GIT_TAG \"6910c9d9165801d8827d628cb72eb7ea9dd538c5\" # v1.16.0",
      ")",
      "FetchContent_MakeAvailable(fmt)"
    ],
    "description": "A template for setting up a fmt dependencies CMake."
  },
  "FetchContent spdlog": {
    "prefix": "spdlog",
    "body": [
      "include(FetchContent)",
      "",
      "FetchContent_Declare(",
      "    spdlog",
      "    GIT_REPOSITORY \"https://github.com/gabime/spdlog.git\"",
      "    GIT_TAG \"f355b3d58f7067eee1706ff3c801c2361011f3d5\" # v1.15.1",
      ")",
      "FetchContent_MakeAvailable(fmt)"
    ],
    "description": "A template for setting up a fmt dependencies CMake."
  }
}
